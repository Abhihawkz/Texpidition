generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum ItemStatus {
  ACTIVE
  INACTIVE
  SOLD_OUTnn
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

model User {
  id            Int           @id @default(autoincrement())
  email         String        @unique
  password      String
  role          Role          @default(USER)
  name          String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  organization  Organization?
  favorites     Favorite[]
  payments      Payment[]
  visits        PageVisit[]
}

model Organization {
  id            Int           @id @default(autoincrement())
  name          String
  description   String?
  contactEmail  String?
  phone         String?
  address       String?
  adminId       Int           @unique
  admin         User          @relation(fields: [adminId], references: [id], onDelete: Cascade)
  website       Website?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Website {
  id              Int           @id @default(autoincrement())
  organizationId  Int           @unique
  organization    Organization  @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  slug            String        @unique
  title           String
  description     String?
  items           Item[]
  images          Image[]
  banners         Banner[]
  videos          Video[]
  campaigns       Campaign[]
  visits          PageVisit[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
}

model Item {
  id            Int           @id @default(autoincrement())
  websiteId     Int
  website       Website       @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  name          String
  description   String?
  price         Float
  status        ItemStatus    @default(ACTIVE)
  images        Image[]
  favorites     Favorite[]
  payments      Payment[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Image {
  id            Int           @id @default(autoincrement())
  url           String
  websiteId     Int?
  website       Website?      @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  itemId        Int?
  item          Item?         @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Banner {
  id            Int           @id @default(autoincrement())
  websiteId     Int
  website       Website       @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  url           String
  title         String?
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Video {
  id            Int           @id @default(autoincrement())
  websiteId     Int
  website       Website       @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  url           String
  title         String?
  description   String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Campaign {
  id            Int           @id @default(autoincrement())
  websiteId     Int
  website       Website       @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  type          String
  content       String
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model Favorite {
  id            Int           @id @default(autoincrement())
  userId        Int
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId        Int
  item          Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  @@unique([userId, itemId])
}

model Payment {
  id                Int           @id @default(autoincrement())
  userId            Int
  user              User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  itemId            Int
  item              Item          @relation(fields: [itemId], references: [id], onDelete: Cascade)
  lemonSqueezyId    String        @unique
  amount            Float
  status            PaymentStatus @default(PENDING)
  createdAt         DateTime      @default(now())
  updatedAt         DateTime      @updatedAt
}

model PageVisit {
  id            Int           @id @default(autoincrement())
  websiteId     Int
  website       Website       @relation(fields: [websiteId], references: [id], onDelete: Cascade)
  userId        Int?
  user          User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  visitedAt     DateTime      @default(now())
}